//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""2c89f106-624d-4977-8d61-6cdbc1cccc72"",
            ""actions"": [
                {
                    ""name"": ""ChangePlayerDirectiion"",
                    ""type"": ""Button"",
                    ""id"": ""0cf4e217-0140-4baf-9eb6-89fcb7cbd04f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSpeedPowerUp"",
                    ""type"": ""Button"",
                    ""id"": ""9318a092-adf0-4cf0-be8b-055bf6210473"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""06f5678f-6774-4826-b0c9-76c09a64620a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePlayerDirectiion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dba286b-e7ab-491b-b2a1-44b0222e7c4d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSpeedPowerUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_ChangePlayerDirectiion = m_PlayerMovement.FindAction("ChangePlayerDirectiion", throwIfNotFound: true);
        m_PlayerMovement_UseSpeedPowerUp = m_PlayerMovement.FindAction("UseSpeedPowerUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_ChangePlayerDirectiion;
    private readonly InputAction m_PlayerMovement_UseSpeedPowerUp;
    public struct PlayerMovementActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerMovementActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangePlayerDirectiion => m_Wrapper.m_PlayerMovement_ChangePlayerDirectiion;
        public InputAction @UseSpeedPowerUp => m_Wrapper.m_PlayerMovement_UseSpeedPowerUp;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @ChangePlayerDirectiion.started += instance.OnChangePlayerDirectiion;
            @ChangePlayerDirectiion.performed += instance.OnChangePlayerDirectiion;
            @ChangePlayerDirectiion.canceled += instance.OnChangePlayerDirectiion;
            @UseSpeedPowerUp.started += instance.OnUseSpeedPowerUp;
            @UseSpeedPowerUp.performed += instance.OnUseSpeedPowerUp;
            @UseSpeedPowerUp.canceled += instance.OnUseSpeedPowerUp;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @ChangePlayerDirectiion.started -= instance.OnChangePlayerDirectiion;
            @ChangePlayerDirectiion.performed -= instance.OnChangePlayerDirectiion;
            @ChangePlayerDirectiion.canceled -= instance.OnChangePlayerDirectiion;
            @UseSpeedPowerUp.started -= instance.OnUseSpeedPowerUp;
            @UseSpeedPowerUp.performed -= instance.OnUseSpeedPowerUp;
            @UseSpeedPowerUp.canceled -= instance.OnUseSpeedPowerUp;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);
    public interface IPlayerMovementActions
    {
        void OnChangePlayerDirectiion(InputAction.CallbackContext context);
        void OnUseSpeedPowerUp(InputAction.CallbackContext context);
    }
}
